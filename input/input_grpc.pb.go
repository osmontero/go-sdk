// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: input.proto

package input

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Integration_ProcessLog_FullMethodName = "/input.Integration/ProcessLog"
)

// IntegrationClient is the client API for Integration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationClient interface {
	ProcessLog(ctx context.Context, opts ...grpc.CallOption) (Integration_ProcessLogClient, error)
}

type integrationClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationClient(cc grpc.ClientConnInterface) IntegrationClient {
	return &integrationClient{cc}
}

func (c *integrationClient) ProcessLog(ctx context.Context, opts ...grpc.CallOption) (Integration_ProcessLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &Integration_ServiceDesc.Streams[0], Integration_ProcessLog_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &integrationProcessLogClient{stream}
	return x, nil
}

type Integration_ProcessLogClient interface {
	Send(*Log) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type integrationProcessLogClient struct {
	grpc.ClientStream
}

func (x *integrationProcessLogClient) Send(m *Log) error {
	return x.ClientStream.SendMsg(m)
}

func (x *integrationProcessLogClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IntegrationServer is the server API for Integration service.
// All implementations must embed UnimplementedIntegrationServer
// for forward compatibility
type IntegrationServer interface {
	ProcessLog(Integration_ProcessLogServer) error
	mustEmbedUnimplementedIntegrationServer()
}

// UnimplementedIntegrationServer must be embedded to have forward compatible implementations.
type UnimplementedIntegrationServer struct {
}

func (UnimplementedIntegrationServer) ProcessLog(Integration_ProcessLogServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessLog not implemented")
}
func (UnimplementedIntegrationServer) mustEmbedUnimplementedIntegrationServer() {}

// UnsafeIntegrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationServer will
// result in compilation errors.
type UnsafeIntegrationServer interface {
	mustEmbedUnimplementedIntegrationServer()
}

func RegisterIntegrationServer(s grpc.ServiceRegistrar, srv IntegrationServer) {
	s.RegisterService(&Integration_ServiceDesc, srv)
}

func _Integration_ProcessLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IntegrationServer).ProcessLog(&integrationProcessLogServer{stream})
}

type Integration_ProcessLogServer interface {
	SendAndClose(*Ack) error
	Recv() (*Log, error)
	grpc.ServerStream
}

type integrationProcessLogServer struct {
	grpc.ServerStream
}

func (x *integrationProcessLogServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *integrationProcessLogServer) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Integration_ServiceDesc is the grpc.ServiceDesc for Integration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Integration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "input.Integration",
	HandlerType: (*IntegrationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessLog",
			Handler:       _Integration_ProcessLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "input.proto",
}
